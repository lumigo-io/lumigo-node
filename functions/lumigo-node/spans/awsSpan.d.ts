import { Context } from 'aws-lambda';
import { BasicChildSpan, BasicSpan, GenericSpan, SpanInfo } from '../types/spans/basicSpan';
import { FunctionSpan } from '../types/spans/functionSpan';
import { HttpInfo } from '../types/spans/httpSpan';
import { RequestData, ResponseData } from '../hooks/baseHttp';
export declare const HTTP_SPAN = "http";
export declare const FUNCTION_SPAN = "function";
export declare const EXTERNAL_SERVICE = "external";
export declare const MONGO_SPAN = "mongoDb";
export declare const REDIS_SPAN = "redis";
export declare const PG_SPAN = "pg";
export declare const MSSQL_SPAN = "msSql";
export declare const MYSQL_SPAN = "mySql";
export declare const NEO4J_SPAN = "neo4j";
export declare const ENRICHMENT_SPAN = "enrichment";
export declare const PRISMA_SPAN = "prisma";
export declare const getSpanInfo: () => SpanInfo;
export declare const getSpanPriority: (span: any) => number;
export declare const spansPrioritySorter: (span1: any, span2: any) => number;
export declare const getSpanMetadata: (span: GenericSpan) => GenericSpan;
export declare const getCurrentTransactionId: () => string;
export declare const isSpanIsFromAnotherInvocation: (span: any) => boolean;
export declare const getBasicSpan: (id: string, transactionId: string) => BasicSpan;
export declare const getEnvsForSpan: (hasError?: boolean) => string;
export declare const getFunctionSpan: (lambdaEvent: {}, lambdaContext: Context) => FunctionSpan;
export declare const removeStartedFromId: (id: any) => any;
export declare const getEndFunctionSpan: (functionSpan: GenericSpan, handlerReturnValue: any) => GenericSpan;
export declare const AWS_PARSED_SERVICES: string[];
export declare const getAwsServiceFromHost: (host?: string) => string;
export declare const getServiceType: (host: any) => string;
export type ServiceData = {
    awsServiceData?: {
        [key: string]: any;
    };
    messageId?: string;
    [key: string]: any;
};
export declare const getServiceData: (requestData: any, responseData: any) => ServiceData;
export declare const decodeHttpBody: (httpBody: any, hasError: boolean) => any | string;
export declare const getHttpInfo: (requestData: RequestData, responseData: any) => HttpInfo;
export declare const getBasicChildSpan: (transactionId: string, awsRequestId: string, spanId: string, spanType: string) => BasicChildSpan;
export declare const getHttpSpanTimings: (requestData: any, responseData: any) => {
    started: any;
    ended: any;
};
export declare const getHttpSpanId: (randomRequestId: any, awsRequestId?: any) => any;
export declare const getHttpSpan: (transactionId: any, awsRequestId: any, randomRequestId: any, requestData: RequestData, responseData?: ResponseData) => {
    info: any;
    service: string;
    started: any;
    ended: any;
    type: string;
    parentId: string;
    reporterAwsRequestId: string;
    id: string;
    vendor: import("../types/spans/basicSpan").Vendor;
    transactionId: string;
    account: string;
    memoryAllocated: string;
    version: string;
    runtime: string;
    readiness: string;
    messageVersion: number;
    token: string;
    region: string;
    invokedArn: string;
    invokedVersion: string;
};
